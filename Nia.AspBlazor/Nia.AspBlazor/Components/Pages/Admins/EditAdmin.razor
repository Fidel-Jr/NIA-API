@page "/admin/edit/{Id:int}"
@rendermode InteractiveServer
@using Nia.Application.Dtos
@using Nia.Domain.Entities
@using Radzen
@using System.Text.Json
@inject HttpClient Http
<main class="h-full pb-16 overflow-y-auto">
    <div class="mt-3">
        <h2 class="h4 fw-semibold text-dark mb-1">Admin Accounts</h2>
        <p class="ms-1 text-muted fw-semibold admn-title">Edit account</p>
    </div>
    <div class="rz-p-0 rz-p-md-12" style="padding: 0 !important;">
        @if (response != null){
        <RadzenTemplateForm TItem="UserDetailDto" Data=@response Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
            <RadzenStack Gap="1rem" class="rz-p-sm-12" Style="padding: 20px !important; background-color: white;">
                    <RadzenImage Path=@($"https://localhost:7201/api/users/image/{response.ImagePath}")
                                 Style="width:100px; height:100px; cursor:pointer;"
                                 AlternateText="QR Code" />
                    
                    @* <img src="https://localhost:7201/api/users/image/{@response.ImagePath}" /> *@
                <RadzenCard Variant="Variant.Outlined">
                    <RadzenUpload Multiple="true" Style="width: 100%"
                                  InputAttributes="@(new Dictionary<string,object>{ { "aria-label", "select file" }})" />
                </RadzenCard>
                <RadzenFormField Text="Full Name" Variant="@variant">
                    <ChildContent>
                        <RadzenTextBox Name="Fullname" @bind-Value=@response.FullName />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Fullname" Text="Full name is required." />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Username" Variant="@variant">
                    <ChildContent>
                            <RadzenTextBox Name="Username" @bind-Value=@response.Username />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Username" Text="Username is required." />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Email" Variant="@variant">
                    <ChildContent>
                            <RadzenTextBox Name="Email" @bind-Value=@response.Email />
                    </ChildContent>
                    <Helper>
                            @* <RadzenRequiredValidator Component="Email" Text="Email is required." /> *@
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Location" Variant="@variant">
                    <ChildContent>
                            <RadzenDropDown @bind-Value="response.LocationId" Name="Location" Style="width: 100%" Data="@locations" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Location" Text="Location is required." />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="New Password" Variant="@variant">
                    <ChildContent>
                            <RadzenTextBox Name="Password" @bind-Value=@response.Password />
                    </ChildContent>
                    <Helper>
                            @* <RadzenRequiredValidator Component="Password" Text="Password is required." /> *@
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Confirm New Password" Variant="@variant">
                    <ChildContent>
                            <RadzenTextBox Name="PasswordConfirmation" @bind-Value=@response.PasswordConfirmation />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="LastName" Text="Password is required." />
                    </Helper>
                </RadzenFormField>
                <div class="d-flex">
                    <div class="col-6">
                        <RadzenButton ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Submit" Text="Add"></RadzenButton>
                    </div>

                </div>



            </RadzenStack>
        </RadzenTemplateForm>
        }
        @* <EventConsole @ref=@console /> *@
        <p>@message</p>
    </div>
</main>
@code {
    [Parameter]
    public int Id { get; set; }
    Variant variant = Variant.Outlined;
    private string? password;
    private string? passwordConfirmation;

    private UserDetailDto? user { get; set; }
    private UserDetailDto? response { get; set; }
    private EditUserDto? userInfo = new();
    private EditUserDto? result { get; set; }

    [Inject] public NotificationService? NotificationService { get; set; }
    string message = "";

    protected override async Task OnInitializedAsync()
    {
        // response = await Http.GetFromJsonAsync<UserDetailDto>($"api/users/admin/{Id}");
        response = await Http.GetFromJsonAsync<UserDetailDto>($"api/users/admin/{Id}");
        if (response != null)
        {
            // 2. Map into your editable DTO
            userInfo = new EditUserDto
            {
                FullName = response.FullName,
                Username = response.Username,
                Email = response.Email,
                LocationId = response.LocationId,
                // leave Password and Confirmation null by default
            };
        }
    }

    async Task OnSubmit()
    {
        if (userInfo == null) return;

        try
        {
            // 4. Send back the EditUserDto
            var httpResponse = await Http.PutAsJsonAsync(
              $"api/users/edit/user/{Id}", userInfo);

            if (httpResponse.IsSuccessStatusCode)
            {
                NotificationService.Notify(
                  NotificationSeverity.Success,
                  "Saved",
                  "Account updated successfully.");
                message = "Update successful.";
            }
            else
            {
                var error = await httpResponse.Content.ReadAsStringAsync();
                NotificationService.Notify(
                  NotificationSeverity.Error,
                  "Save failed",
                  error);
                message = $"Error: {httpResponse.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(
              NotificationSeverity.Error,
              "Unexpected Error",
              ex.Message);
            message = $"Exception: {ex.Message}";
        }

    }
    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        NotificationService.Notify(NotificationSeverity.Warning, "Validation", "Please fix the validation errors.");
    }
   
    private List<int> locations = new()
    {
       1,2,3,4,5
    };



}