@page "/user/edit/{Id:int}"
@rendermode InteractiveServer
@using Nia.Application.Dtos
@using Nia.Domain.Entities
@using Radzen
@using System.Text.Json
@inject HttpClient Http
<main class="h-full pb-16 overflow-y-auto">
    <div class="mt-3">
        <h2 class="h4 fw-semibold text-dark mb-1">Admin Accounts</h2>
        <p class="ms-1 text-muted fw-semibold admn-title">Edit account</p>
    </div>
    <div class="rz-p-0 rz-p-md-12" style="padding: 0 !important;">
        @if (response != null){
        <RadzenTemplateForm TItem="UserDetailDto" Data=@response Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
            <RadzenStack Gap="1rem" class="rz-p-sm-12" Style="padding: 20px !important; background-color: white;">
                    <RadzenImage Path=@($"https://localhost:7201/api/users/image/{response.ImagePath}")
                                 Style="width:100px; height:100px; cursor:pointer;"
                                 AlternateText="QR Code" />
                    
                    @* <img src="https://localhost:7201/api/users/image/{@response.ImagePath}" /> *@
                <RadzenCard Variant="Variant.Outlined">
                    <RadzenUpload Multiple="true" Style="width: 100%"
                                  InputAttributes="@(new Dictionary<string,object>{ { "aria-label", "select file" }})" />
                </RadzenCard>
                <RadzenFormField Text="Full Name" Variant="@variant">
                    <ChildContent>
                        <RadzenTextBox Name="Fullname" @bind-Value=@response.FullName />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Fullname" Text="Full name is required." />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Username" Variant="@variant">
                    <ChildContent>
                            <RadzenTextBox Name="Username" @bind-Value=@response.Username />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Username" Text="Username is required." />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Email" Variant="@variant">
                    <ChildContent>
                            <RadzenTextBox Name="Email" @bind-Value=@response.Email />
                    </ChildContent>
                    <Helper>
                            @* <RadzenRequiredValidator Component="Email" Text="Email is required." /> *@
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Location" Variant="@variant">
                    <ChildContent>
                            <RadzenDropDown @bind-Value="response.LocationId" Name="Location" Style="width: 100%" Data="@locations" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Location" Text="Location is required." />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Password" Variant="@variant">
                    <ChildContent>
                        <RadzenPassword Name="Password" @bind-Value="@response.Password" Style="width: 100%;" />
                    </ChildContent>
                    <Helper>
                        @* <RadzenRequiredValidator Component="Password" Text="Password is required." /> *@
                    </Helper>
                </RadzenFormField>
                    <RadzenFormField Text="Confirm Password" Variant="@variant">
                        <ChildContent>
                            <RadzenPassword Name="PasswordConfirmation" @bind-Value="response.PasswordConfirmation" Style="width: 100%;" />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="PasswordConfirmation" Text="Confirm password is required." />
                            <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(response.PasswordConfirmation)) Value=response.Password Component="PasswordConfirmation" Text="Passwords should be the same" Style="position: absolute" />
                        </Helper>
                    </RadzenFormField>
                <div class="d-flex">
                    <div class="col-6">
                        <RadzenButton ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Submit" Text="Add"></RadzenButton>
                    </div>

                </div>



            </RadzenStack>
        </RadzenTemplateForm>
        }
        @* <EventConsole @ref=@console /> *@
    </div>
</main>
@code {
    [Parameter]
    public int Id { get; set; }
    Variant variant = Variant.Outlined;
    private string? password;
    private string? passwordConfirmation;

    private UserDetailDto? user { get; set; }
    private UserDetailDto? response { get; set; }


    protected override async Task OnInitializedAsync()
    {
        response = await Http.GetFromJsonAsync<UserDetailDto>($"api/users/admin/{Id}");
    }

    void OnSubmit()
    {
        
    }
    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
    }

    int progress;
    bool showProgress;
    bool showComplete;
    string completionMessage;
    bool cancelUpload = false;

   

    void OnComplete(UploadCompleteEventArgs args)
    {
        completionMessage = args.Cancelled ? "Upload Cancelled!" : "Upload Complete!";
        showProgress = false;
        showComplete = true;
    }

    void OnProgress(UploadProgressArgs args)
    {
        showProgress = true;
        showComplete = false;
        progress = args.Progress;

        // cancel upload
        args.Cancel = cancelUpload;

        // reset cancel flag
        cancelUpload = false;
    }

    void OnCancel()
    {
        cancelUpload = true;
    }

    private List<int> locations = new()
    {
       1,2,3,4,5
    };



}