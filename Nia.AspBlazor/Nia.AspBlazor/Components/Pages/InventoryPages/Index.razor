@page "/inventory"
@using Nia.Domain.Entities
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@rendermode InteractiveServer
@inject HttpClient Http
@inject DialogService DialogService
@inject NavigationManager NavigationManager

<h3 style="margin: 6px 0;">Inventory</h3>

<style>
    .my-class td {
        border-top: 1px solid black !important;
        border-bottom: 1px solid black !important;
    }
</style>

<RadzenStack class="rz-mb-6">
    <div style="display:flex; gap:1rem; align-items:center; justify-content: flex-end;">
        <!-- existing search box -->
        <RadzenTextBox Placeholder="Search..."
                       @oninput="@Search" />

        <!-- month filter dropdown -->
        <RadzenDropDown TValue="int?"
                        @bind-Value="selectedMonth"
                        Data="@monthOptions"
                        TextProperty="Name"
                        ValueProperty="Value"
                        Placeholder="Filter by month"
                        Style="width:180px;"
                        AllowClear="false"
                        Change="@(args => OnMonthFilter(args))" />
    </div>
</RadzenStack>


<RadzenDataGrid @ref="grid0"
                    Data="@response"
                    TItem="ItemWrapper"
                    @bind-Value="@selectedItems"
                    ColumnWidth="200px"
                    FilterPopupRenderMode="PopupRenderMode.OnDemand"
                    FilterMode="FilterMode.Advanced"
                    AllowPaging="true"
                    PageSize="8"
                    AllowSorting="true"
                    PagerHorizontalAlign="@pagerHorizontalAlign"
                    AllowColumnPicking="@WithColumnPicker"
                    ShowPagingSummary="true"
                    Density="@Density"
                    Style="border: none;"
                    PageSizeOptions="@pageSizeOptions"
                IsLoading=@isLoading>

       
        <EmptyTemplate>
            <p class="text-gray-400 text-xl m-8">No records.</p>
           
        </EmptyTemplate>



        <Columns>
            <!-- QR Code column -->
            <RadzenDataGridColumn TItem="ItemWrapper"
                                  Property="qrCode"
                                  Title="QR"
                                  Frozen="true"
                                  Filterable="false" Width="100px">
                <Template Context="wrapper">

                     <div style="display:flex; justify-content:center; align-items:center; gap:4px;">
                
                        <RadzenImage Path="@wrapper.qrCode"
                                     Style="width:40px; height:40px; cursor:pointer;"
                                     AlternateText="QR Code"
                                     Click="@(async () => await OpenOrder(wrapper.guid.ToString()))" />
                    </div>
                </Template>
            </RadzenDataGridColumn>
       
            <RadzenDataGridColumn TItem="ItemWrapper"
                                  Title="Image"
                                  Filterable="false"
                                 Width="100px">
                <Template Context="wrapper">
                    <div style="display:flex; justify-content:center; align-items:center;">
                        <RadzenImage Path="@wrapper.item.ImagePath"
                                     Style="width:40px; height:40px; cursor:pointer;"
                                      />
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <!-- All Item properties: -->
            @* <RadzenDataGridColumn TItem="ItemWrapper"
                                  Property="item.Id"
                                  Title="ID" /> *@
            <RadzenDataGridColumn TItem="ItemWrapper"
                                  Property="item.Unit"
                                  Title="Article" />
            <RadzenDataGridColumn TItem="ItemWrapper"
                                  Property="item.Category.CategoryName"
                                  Title="Category" />
            <RadzenDataGridColumn TItem="ItemWrapper"
                                  Property="item.Description"
                                  Title="Description" />
            <RadzenDataGridColumn TItem="ItemWrapper"
                                  Property="item.Pac"
                                  Title="Property Account Code" />
            <RadzenDataGridColumn TItem="ItemWrapper"
                                  Property="item.UnitValue"
                                  Title="Unit Value" 
                                  TextAlign="TextAlign.Center"/>
            <RadzenDataGridColumn TItem="ItemWrapper"
                                  Property="item.DateAcquired"
                                  Title="Date Acquired" />
            <RadzenDataGridColumn TItem="ItemWrapper"
                                  Property="item.PoNumber"
                                  Title="PO Number" />
            <RadzenDataGridColumn TItem="ItemWrapper" Title="Condition">
                <Template Context="wrapper">
                    @($"{wrapper.item.Condition?.ConditionName} {wrapper.item.ConditionNumber?.ConditionNumberType}")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ItemWrapper" Title="Actions" Filterable="false" Sortable="false" Width="100px">
                <Template Context="wrapper">
                    <div style="display: flex; justify-content: center; gap: 8px;">
                        <!-- Edit Button -->
                        <RadzenButton Icon="edit"
                                      Size="ButtonSize.Medium"
                                      ButtonStyle="ButtonStyle.Success"
                                      Style="padding: 4px; color: white;"
                                  Click="@(e => OnEditItem(e, wrapper.guid))" />

                        <!-- Delete Button -->
                        <RadzenButton Icon="delete"
                                      Size="ButtonSize.Medium"
                                      ButtonStyle="ButtonStyle.Danger"
                                      Style="padding: 4px;" />
                    </div>
                </Template>
            </RadzenDataGridColumn>
        
       
        </Columns>

        <FooterTemplate>
            <RadzenStack Orientation="Orientation.Horizontal"
                         AlignItems="AlignItems.Center"
                         Gap="1rem"
                         Style="margin:1rem;">
                <RadzenButton Text="Export XLS" Icon="grid_on" Style="background-color:limegreen;" />
                <RadzenButton Text="Export CSV" Icon="wrap_text" Style="background-color:limegreen;" />
            </RadzenStack>
        </FooterTemplate>
    </RadzenDataGrid>

    
@code {
    // Strongly‑typed selection
    IList<ItemWrapper> selectedItems = new List<ItemWrapper>();
    // Data source
    private List<ItemWrapper> response = new();
    private List<ItemWrapper> originalResponse = new();

    // DataGrid Properties
    bool isLoading = false;
    HorizontalAlign pagerHorizontalAlign = HorizontalAlign.Right;
    bool EmployeeIDVisible = true;
    [Parameter] public bool WithColumnPicker { get; set; } = true;
    private string? SearchValue;
    Density Density = Density.Default;
    private RadzenDataGrid<ItemWrapper>? grid0;
    IEnumerable<int> pageSizeOptions = new int[] { 8, 16, 22 };
    int? selectedMonth;
    class MonthOption { public int? Value { get; set; } public string? Name { get; set; } }
    List<MonthOption> monthOptions = new List<MonthOption>
    {
        // first entry is “All” with a null Value
        new MonthOption { Value = null, Name = "All" }
    }
    .Concat(
        // then the 12 real months
        Enumerable.Range(1, 12)
          .Select(i => new MonthOption
          {
              Value = i,
              Name = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)
          })
    )
    .ToList();


    public class ItemWrapper
    {
        public Item item { get; set; } = default!;
        public string qrCode { get; set; } = string.Empty;
        public Guid guid { get; set; }
    }

    void OnEditItem(MouseEventArgs args, Guid guid)
    {
        // Navigate to your edit page, passing the GUID
        NavigationManager.NavigateTo($"/items/edit/{guid}");
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     try
    //     {
    //         originalResponse = await Http.GetFromJsonAsync<List<ItemWrapper>>("api/items")
    //                             ?? new List<ItemWrapper>();
    //         response = originalResponse.ToList();
    //     }
    //     catch (Exception ex)
    //     {
    //         isLoading = true;
    //     }
    //     finally
    //     {
    //         isLoading = false;
    //     }
    // }
    
    protected override async Task OnInitializedAsync()
    {
        _ = LoadDataAsync(); // Fire and forget — don't await to keep nav fast
    }

    private async Task LoadDataAsync()
    {
        try
        {
            originalResponse = await Http.GetFromJsonAsync<List<ItemWrapper>>("api/items")
                                ?? new List<ItemWrapper>();
            response = originalResponse.ToList();
            isLoading = true;

        }
        catch
        {
            isLoading = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
   

    private async Task OpenOrder(string guid)
    {
        await DialogService.OpenAsync<ImageCard>(
            $"Item Details",
            new Dictionary<string, object> { ["QrCode"] = guid },
            new DialogOptions { Width = "420px", Height = "420px" }
        );
    }

    void OnMonthFilter(object value)
    {
        // @bind-Value already did: selectedMonth = (int?)value
        ApplyFilters();
    }

    void ApplyFilters()
    {
        // start from the un‑filtered master list
        var query = originalResponse.AsEnumerable();

        // 1) apply text‑search if any
        if (!string.IsNullOrWhiteSpace(SearchValue))
        {
            var term = SearchValue.Trim();
            query = query.Where(w =>
                w.item.Description?.Contains(term, StringComparison.OrdinalIgnoreCase) == true ||
                w.item.Unit?.Contains(term, StringComparison.OrdinalIgnoreCase) == true ||
                w.item.PoNumber?.Contains(term, StringComparison.OrdinalIgnoreCase) == true ||
                w.item.Id.ToString().Contains(term) ||
                w.item.UnitValue.ToString().Contains(term) ||
                w.item.Category.CategoryName.Contains(term, StringComparison.OrdinalIgnoreCase) ||
                w.item.Location.LocationName.Contains(term, StringComparison.OrdinalIgnoreCase) ||
                (
                  (w.item.Condition.ConditionName ?? "")
                + (w.item.ConditionNumber.ConditionNumberType ?? "")
                )
                .Contains(term, StringComparison.OrdinalIgnoreCase)
            );
        }

        // 2) apply month filter if one is selected
        if (selectedMonth.HasValue)
        {
            query = query.Where(w =>
                w.item.DateAcquired.Month == selectedMonth.Value
            );
        }
       
        // 3) finalize
        response = query.ToList();

        // 4) reset paging
        if (grid0 != null)
        {
            grid0.GoToPage(0);
        }

        StateHasChanged();
    }

    protected async Task Search(ChangeEventArgs args)
    {
        SearchValue = args.Value?.ToString()?.Trim();
        ApplyFilters();
    }
}
