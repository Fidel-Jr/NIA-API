@* @page "p1//inventory"
@using System.Net.Http.Json
@using Nia.Domain.Entities
@inject HttpClient httpClient
@rendermode InteractiveServer

<style>
    .sticky-col {
        position: sticky;
        left: 0;
        background-color: white;
        z-index: 1;
        box-shadow: 2px 0 5px -2px rgba(0,0,0,0.1);
    }

    --mud-palette-primary{
        color: greenyellow !important;
        background-color: greenyellow !important;
    }
</style>

<h3 style="font-size: 30px; margin: 20px 0 0 0;">Inventory</h3>

<div class="d-flex">
    
    <div style="width: 25%; margin: 20px 20px 20px 0px;">
        <MudTextField Immediate="true" OnBlur="() => StateHasChanged()" Margin="Margin.Dense" @bind-Value="TextValue" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
    </div>
</div>


    <MudTable Items="@FilteredElements" Style="margin: 2px;" Hover="true" SortLabel="Sort By" HorizontalScrollbar="true">
        <HeaderContent>
            <MudTh class="sticky-col"><MudTableSortLabel SortBy="new Func<Item, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel Enabled="@enabled" SortBy="new Func<Item, object>(x => x.Unit)">Sign</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<Item, object>(x => x.Description)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x => x.Pac)">Position</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x => x.DateAcquired)">Mass</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x => x.PoNumber)">PoNumber</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x => x.PoNumber)">PoNumber</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x => x.PoNumber)">PoNumber</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x => x.PoNumber)">PoNumber</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x => x.PoNumber)">PoNumber</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x => x.PoNumber)">PoNumber</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Item, object>(x => x.PoNumber)">PoNumber</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr" class="sticky-col">@context.Id</MudTd>
            <MudTd DataLabel="Sign">@context.Unit</MudTd>
            <MudTd DataLabel="Name">@context.Description</MudTd>
            <MudTd DataLabel="Position">@context.Pac</MudTd>
            <MudTd DataLabel="Molar mass">@context.DateAcquired</MudTd>
            <MudTd DataLabel="Molar mass">@context.PoNumber</MudTd>
            <MudTd DataLabel="Molar mass">@context.PoNumber</MudTd>
            <MudTd DataLabel="Molar mass">@context.PoNumber</MudTd>
            <MudTd DataLabel="Molar mass">@context.PoNumber</MudTd>
            <MudTd DataLabel="Molar mass">@context.PoNumber</MudTd>
            <MudTd DataLabel="Molar mass">@context.PoNumber</MudTd>
            <MudTd DataLabel="Molar mass">@context.PoNumber</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 8, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>

@* <MudSwitch @bind-Value="enabled" Color="Color.Info">Enable sorting on the Sign Column</MudSwitch> *@

@* @code {

    public string TextValue { get; set; } = string.Empty;
    private bool enabled = true;
    private IEnumerable<Item> Elements = new List<Item>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Item>>("api/items");

    }
    private IEnumerable<Item> FilteredElements => string.IsNullOrWhiteSpace(TextValue)
        ? Elements
        : Elements.Where(x =>
            (x.Description?.Contains(TextValue, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (x.Unit?.Contains(TextValue, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (x.PoNumber?.Contains(TextValue, StringComparison.OrdinalIgnoreCase) ?? false) ||
            x.Id.ToString().Contains(TextValue));
}  *@