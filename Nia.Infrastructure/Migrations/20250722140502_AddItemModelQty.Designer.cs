// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nia.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Nia.Infrastructure.Migrations
{
    [DbContext(typeof(NiaDbContext))]
    [Migration("20250722140502_AddItemModelQty")]
    partial class AddItemModelQty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Nia.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Desktop",
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Consumables",
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "ICT",
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Nia.Domain.Entities.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("condition_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_conditions");

                    b.ToTable("conditions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConditionName = "Serviceable",
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ConditionName = "Non - Serviceable",
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ConditionName = "On Maintenance",
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Nia.Domain.Entities.ConditionNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConditionNumberType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("condition_number_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_condition_numbers");

                    b.ToTable("condition_numbers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConditionNumberType = "A1",
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ConditionNumberType = "A2",
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ConditionNumberType = "A3",
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ConditionNumberType = "A4",
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            ConditionNumberType = "A5",
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Nia.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("ConditionId")
                        .HasColumnType("integer")
                        .HasColumnName("condition_id");

                    b.Property<int>("ConditionNumberId")
                        .HasColumnType("integer")
                        .HasColumnName("condition_number_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("DateAcquired")
                        .HasColumnType("date")
                        .HasColumnName("date_acquired");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_path");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer")
                        .HasColumnName("location_id");

                    b.Property<string>("Pac")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pac");

                    b.Property<string>("PoNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("po_number");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("unit");

                    b.Property<decimal>("UnitValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("unit_value");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_items_category_id");

                    b.HasIndex("ConditionId")
                        .HasDatabaseName("ix_items_condition_id");

                    b.HasIndex("ConditionNumberId")
                        .HasDatabaseName("ix_items_condition_number_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_items_location_id");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("Nia.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.ToTable("locations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationName = "Billing Unit",
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationName = "Engineering",
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationName = "O & M",
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationName = "Admin & Finance",
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationName = "IDDD",
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationName = "Equipment",
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Nia.Domain.Entities.QRCode", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("qr_code");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Guid")
                        .HasName("pk_qr_codes");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_qr_codes_item_id");

                    b.ToTable("qr_codes", (string)null);
                });

            modelBuilder.Entity("Nia.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer")
                        .HasColumnName("location_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_users_location_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Alice Mendoza",
                            ImagePath = "/images/users/alice.png",
                            LocationId = 1,
                            PasswordHash = "AdminPass123",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "alice.admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "John Reyes",
                            ImagePath = "/images/users/john.png",
                            LocationId = 2,
                            PasswordHash = "UserPass123",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "john.reyes"
                        });
                });

            modelBuilder.Entity("Nia.Domain.Entities.Item", b =>
                {
                    b.HasOne("Nia.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_items_categories_category_id");

                    b.HasOne("Nia.Domain.Entities.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_conditions_condition_id");

                    b.HasOne("Nia.Domain.Entities.ConditionNumber", "ConditionNumber")
                        .WithMany()
                        .HasForeignKey("ConditionNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_condition_numbers_condition_number_id");

                    b.HasOne("Nia.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_locations_location_id");

                    b.Navigation("Category");

                    b.Navigation("Condition");

                    b.Navigation("ConditionNumber");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Nia.Domain.Entities.QRCode", b =>
                {
                    b.HasOne("Nia.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk_qr_codes_items_item_id");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Nia.Domain.Entities.User", b =>
                {
                    b.HasOne("Nia.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_locations_location_id");

                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
